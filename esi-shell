#!/usr/bin/env bash

set -u

abort() {
  printf "%s\n" "$@" >&2
  exit 1
}

# Fail fast with a concise message when not using bash
# Single brackets are needed here for POSIX compatibility
# shellcheck disable=SC2292
if [ -z "${BASH_VERSION:-}" ]
then
  abort "Bash is required to interpret this script."
fi

# Fail fast if OS is not Linux
if [[ "$(uname)" != "Linux" ]]
then
  abort "esi-shell is only supported on Linux."
fi

REQUIRED_SINGULARITY_VERSION=3.7.4
REQUIRED_DOCKER_VERSION=23.0.0

# set default values
CONTAINER="bnlnpps/esi-opticks"
DEFAULT_VERSION="latest"
VERSION=$DEFAULT_VERSION

usage() {
  echo "Start esi-shell, the ESI containerized software environment."
  echo ""
  echo "USAGE:"
  echo "  ./esi-shell [OPTIONS] [ -- COMMAND ]"
  echo ""
  echo "OPTIONAL ARGUMENTS:"
  echo "  -v, --version    Version to install (Default: $DEFAULT_VERSION)"
  echo "  -h, --help       Print this message"
  echo ""
  echo "EXAMPLES:"
  echo "  - Start an interactive shell: ./esi-shell" 
  echo "  - Use different version:      ./esi-shell -v 0.1.0"
  echo "  - Execute a single command:   ./esi-shell -- <COMMAND>"
  echo ""
  exit "${1:-0}"
}

# string formatters
if [[ -t 1 ]]
then
  tty_escape() { printf "\033[%sm" "$1"; }
else
  tty_escape() { :; }
fi
tty_mkbold() { tty_escape "1;$1"; }
tty_underline="$(tty_escape "4;39")"
tty_blue="$(tty_mkbold 34)"
tty_red="$(tty_mkbold 31)"
tty_bold="$(tty_mkbold 39)"
tty_reset="$(tty_escape 0)"

shell_join() {
  local arg
  printf "%s" "$1"
  shift
  for arg in "$@"
  do
    printf " "
    printf "%s" "${arg// /\ }"
  done
}

chomp() {
  printf "%s" "${1/"$'\n'"/}"
}

ohai() {
  printf "${tty_blue}==>${tty_bold} %s${tty_reset}\n" "$(shell_join "$@")"
}

warn() {
  printf "${tty_red}Warning${tty_reset}: %s\n" "$(chomp "$1")" >&2
}


while [ $# -gt 0 ]
do
  case $1 in
    -v | --version)
      VERSION=${2:-$DEFAULT_VERSION}
      shift
      shift
      ;;
    -h | --help)
      usage
      ;;
    --)
      shift
      break
      ;;
    *)
      warn "Unrecognized option: '$1'"
      usage 1
      ;;
  esac
done

execute() {
  if ! "$@"
  then
    abort "$(printf "Failed during: %s" "$(shell_join "$@")")"
  fi
}

major_minor() {
  echo "${1%%.*}.$(
    x="${1#*.}"
    echo "${x%%.*}"
  )"
}

version_gt() {
  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -gt "${2#*.}" ]]
}
version_ge() {
  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -ge "${2#*.}" ]]
}
version_lt() {
  [[ "${1%.*}" -lt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -lt "${2#*.}" ]]
}

test_singularity() {
  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  local singularity_version_output
  singularity_version_output="$("$1" version 2>/dev/null)"
  if [[ "${singularity_version_output}" =~ (^[0-9]+\.[0-9]+\.[0-9]+) ]]
  then
    #ohai "sing v: ${BASH_REMATCH[1]}"
    version_ge "$(major_minor "${BASH_REMATCH[1]}")" "$(major_minor "${REQUIRED_SINGULARITY_VERSION}")"
  else
    abort "Unexpected singularity version: '${singularity_version_output}'!"
  fi
}

test_docker() {
  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  local docker_version_output
  docker_version_output="$("$1" --version 2>/dev/null)"
  if [[ "${docker_version_output}" =~ "Docker version "([0-9]+\.[0-9]+\.[0-9]+) ]]
  then
    #ohai "docker v: ${BASH_REMATCH[1]}"
    version_ge "$(major_minor "${BASH_REMATCH[1]}")" "$(major_minor "${REQUIRED_DOCKER_VERSION}")"
  else
    abort "Unexpected docker version: '${docker_version_output}'!"
  fi
}

# Search for the given executable in PATH (avoids a dependency on the `which` command)
which() {
  # Alias to Bash built-in command `type -P`
  type -P "$@"
}

# Search PATH for the specified program
# function which is set above
find_tool() {
  if [[ $# -ne 1 ]]
  then
    return 1
  fi

  local executable
  while read -r executable
  do
    if [[ "${executable}" != /* ]]
    then
      warn "Ignoring ${executable} (relative paths don't work)"
    elif "test_$1" "${executable}"
    then
      echo "${executable}"
      break
    fi
  done < <(which -a "$1")
}


MOUNT=""
for dir in /Volumes /Users /tmp; do
  ## only add directories once
  if [[ ${MOUNT} =~ $(basename $dir) ]]; then
    continue
  fi
  if [ -d $dir ]; then
    MOUNT="$MOUNT -v $dir:$dir"
  fi
done
ohai "Docker mount directive: '$MOUNT'"

PLATFORM_FLAG=''
if [ `uname -m` = 'arm64' ]; then
  PLATFORM_FLAG='--platform linux/amd64'
  ohai "Additional platform flag to run on arm64"
fi

USABLE_SINGULARITY="$(find_tool singularity)"
USABLE_DOCKER="$(find_tool docker)"

IMG=${CONTAINER}:${VERSION}
ohai "Using esi-shell image: ${IMG}"

if [[ -n "${USABLE_SINGULARITY-}" ]]
then
    cmd="singularity exec -e docker://$IMG bash -l"
    ohai "Executing: $cmd"
    exec $cmd
elif [[ -n "${USABLE_DOCKER-}" ]]
then
    cmd="docker run --gpus all $PLATFORM_FLAG $MOUNT -w=$PWD -it --rm $IMG bash -l"
    ohai "Executing: $cmd"
    exec $cmd
else
    abort "Either singularity (>= $REQUIRED_SINGULARITY_VERSION) or docker (>= $REQUIRED_DOCKER_VERSION) must be installed to proceed."
fi
